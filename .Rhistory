req(d)
d <- d[1,1]
out <- col[d, c("color","HEX","RGB","HSV")]
colnames(out)[1] <- "Color"
out
}, colnames = T, rownames = F, hover = T)
d
runApp()
runApp()
runApp()
xy <- expand.grid(x=1:37,y=1:15)[1:555,]
coll <- data.frame(t(rgb2hsv(unlist(col2rgb(colors())))),
o=1:657,
color=colors())
col <- coll %>%
filter(str_detect(color, "^gray", negate=T)) %>%
separate(color, remove=F,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])", convert=T) %>%
replace_na(list(num= 0)) %>%
add_column(xy) %>%
mutate(HEX=col2hex(color),
RGB=apply(col2rgb(color),2,paste,collapse = ', ')) %>%
mutate(HSV=apply(round(rgb2hsv(col2rgb(color)),3),
MARGIN=2, FUN=paste, collapse = ', '))
ggp <- ggplotly(
ggplot(col,aes(x=y,y=x, fill=HEX,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile(colour="white",size=0.5)+
scale_fill_identity()+
scale_y_reverse(limits = c(37, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm")),
tooltip="text", source="plotly1") %>%
layout(xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE))
ggp
runApp()
runApp()
runApp()
runApp()
head(col)
col$o
colnames(col)
rownames(col)
col$color
factor(col$color)
sort(col$color)
xy <- expand.grid(x=1:15,y=1:37)[1:555,]
coll <- data.frame(t(rgb2hsv(unlist(col2rgb(colors())))),
o=1:657,
color=colors())
col <- coll %>%
filter(str_detect(color, "^gray", negate=T)) %>%
separate(color, remove=F,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])", convert=T) %>%
replace_na(list(num= 0)) %>%
add_column(xy) %>%
mutate(HEX=col2hex(color),
RGB=apply(col2rgb(color),2,paste,collapse = ', ')) %>%
mutate(HSV=apply(round(rgb2hsv(col2rgb(color)),3),
MARGIN=2, FUN=paste, collapse = ', '))
ggp <- ggplotly(
ggplot(col,aes(x=x,y=y,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile(aes(fill=color),colour="white",size=0.5)+
scale_fill_identity()+
scale_y_reverse(limits = c(37, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm")),
tooltip="text", source="plotly1") %>%
layout(xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE))
ggp
xy <- expand.grid(x=15:1,y=1:37)[1:555,]
coll <- data.frame(t(rgb2hsv(unlist(col2rgb(colors())))),
o=1:657,
color=colors())
col <- coll %>%
filter(str_detect(color, "^gray", negate=T)) %>%
separate(color, remove=F,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])", convert=T) %>%
replace_na(list(num= 0)) %>%
add_column(xy) %>%
mutate(HEX=col2hex(color),
RGB=apply(col2rgb(color),2,paste,collapse = ', ')) %>%
mutate(HSV=apply(round(rgb2hsv(col2rgb(color)),3),
MARGIN=2, FUN=paste, collapse = ', '))
ggp <- ggplotly(
ggplot(col,aes(x=x,y=y,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile(aes(fill=color),colour="white",size=0.5)+
scale_fill_identity()+
scale_y_reverse(limits = c(37, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm")),
tooltip="text", source="plotly1") %>%
layout(xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE))
ggp
xy <- expand.grid(x=1:15,y=37:1)[1:555,]
coll <- data.frame(t(rgb2hsv(unlist(col2rgb(colors())))),
o=1:657,
color=colors())
col <- coll %>%
filter(str_detect(color, "^gray", negate=T)) %>%
separate(color, remove=F,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])", convert=T) %>%
replace_na(list(num= 0)) %>%
add_column(xy) %>%
mutate(HEX=col2hex(color),
RGB=apply(col2rgb(color),2,paste,collapse = ', ')) %>%
mutate(HSV=apply(round(rgb2hsv(col2rgb(color)),3),
MARGIN=2, FUN=paste, collapse = ', '))
ggp <- ggplotly(
ggplot(col,aes(x=x,y=y,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile(aes(fill=color),colour="white",size=0.5)+
scale_fill_identity()+
#scale_y_reverse(limits = c(37, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm")),
tooltip="text", source="plotly1") %>%
layout(xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE))
ggp
xy <- expand.grid(y=37:1,x=1:15)[1:555,]
coll <- data.frame(t(rgb2hsv(unlist(col2rgb(colors())))),
o=1:657,
color=colors())
col <- coll %>%
filter(str_detect(color, "^gray", negate=T)) %>%
separate(color, remove=F,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])", convert=T) %>%
replace_na(list(num= 0)) %>%
add_column(xy) %>%
mutate(HEX=col2hex(color),
RGB=apply(col2rgb(color),2,paste,collapse = ', ')) %>%
mutate(HSV=apply(round(rgb2hsv(col2rgb(color)),3),
MARGIN=2, FUN=paste, collapse = ', '))
ggp <- ggplotly(
ggplot(col,aes(x=x,y=y,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile(aes(fill=color),colour="white",size=0.5)+
scale_fill_identity()+
#scale_y_reverse(limits = c(37, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm")),
tooltip="text", source="plotly1") %>%
layout(xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE))
ggp
runApp()
sort(col$color)
factor(col$color)
factor(c(b,c,a))
factor(c("b","c","a"))
factor(c("b","c","a"), ordered=F)
factor(c("b","c","a"), levels=c("b","c","a"))
runApp()
x <- labelled(sample(5, 10, replace = TRUE), c(Bad = 1, Good = 5))
x <- data.frame(a = 1:5, b=c("banana","apple","cat"))
x <- data.frame(a = 1:5, b=c("egg","dog","banana","apple","cat"))
x
x %>%
as_factor(b)
as_factor(b)
as_factor(x$b)
xy <- expand.grid(y=37:1,x=1:15)[1:555,]
coll <- data.frame(t(rgb2hsv(unlist(col2rgb(colors())))),
o=1:657,
color=colors())
col <- coll %>%
filter(str_detect(color, "^gray", negate=T)) %>%
separate(color, remove=F,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])", convert=T) %>%
replace_na(list(num= 0)) %>%
add_column(xy) %>%
mutate(HEX=col2hex(color),
RGB=apply(col2rgb(color),2,paste,collapse = ', ')) %>%
mutate(HSV=apply(round(rgb2hsv(col2rgb(color)),3),
MARGIN=2, FUN=paste, collapse = ', '))
col$color <- as_factor(col$color)
col$color
runApp()
runApp()
runApp()
nc <- input$numcol
al <- input$alpha
sa <- input$s
va <- input$v
xy <- expand_grid(x=1:5, y=1:nc)
col <- data.frame(xy, color= c(rainbow(nc,alpha=al,s=sa,v=va),
heat.colors(nc,alpha=al),
terrain.colors(nc,alpha=al),
topo.colors(nc,alpha=al),
cm.colors(nc,alpha=al)))
#col$color <- as_factor(col$color)
cp <- ggplotly(
ggplot(col,aes(x=y,y=x, fill=color)) +
geom_tile(colour="white", size=0.6, height=0.8)+
scale_fill_identity()+
#scale_y_continuous()+
scale_y_reverse(breaks=1:5,
labels=c("rainbow", "heat.colors", "terrain.colors", "topo.colors", "cm.colors"))+
theme(legend.position = "none",
line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(face="bold",
size=10),
title = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm"))
) %>%
layout(xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE))
cp
nc <- 5
al <- 1
sa <- 1
va <-
1
xy <- expand_grid(x=1:5, y=1:nc)
col <- data.frame(xy, color= c(rainbow(nc,alpha=al,s=sa,v=va),
heat.colors(nc,alpha=al),
terrain.colors(nc,alpha=al),
topo.colors(nc,alpha=al),
cm.colors(nc,alpha=al)))
#col$color <- as_factor(col$color)
cp <- ggplotly(
ggplot(col,aes(x=y,y=x, fill=color)) +
geom_tile(colour="white", size=0.6, height=0.8)+
scale_fill_identity()+
#scale_y_continuous()+
scale_y_reverse(breaks=1:5,
labels=c("rainbow", "heat.colors", "terrain.colors", "topo.colors", "cm.colors"))+
theme(legend.position = "none",
line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(face="bold",
size=10),
title = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm"))
) %>%
layout(xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE))
cp
col
col$color
factor(col$color)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
xy <- expand.grid(y=37:1,x=1:15)[1:555,]
coll <- data.frame(t(rgb2hsv(unlist(col2rgb(colors())))),
o=1:657,
color=colors())
col <- coll %>%
filter(str_detect(color, "^gray", negate=T)) %>%
separate(color, remove=F,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])", convert=T) %>%
replace_na(list(num= 0)) %>%
add_column(xy) %>%
mutate(HEX=col2hex(color),
RGB=apply(col2rgb(color),2,paste,collapse = ', ')) %>%
mutate(HSV=apply(round(rgb2hsv(col2rgb(color)),3),
MARGIN=2, FUN=paste, collapse = ', '))
col$color <- as_factor(col$color)
ggp <- ggplotly(
ggplot(col,aes(x=x,y=y,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile(aes(fill=color),colour="white",size=0.5)+
scale_fill_identity()+
#scale_y_reverse(limits = c(37, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm")),
tooltip="text", source="plotly1") %>%
layout(xaxis = list(autorange = TRUE),
yaxis = list(autorange = TRUE))
ggp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nc <- input$numcol
al <- input$alpha
sa <- input$s
va <- input$v
xy <- expand_grid(x=1:5, y=1:nc)
col <- data.frame(xy, color= c(rainbow(nc,alpha=al,s=sa,v=va),
heat.colors(nc,alpha=al),
terrain.colors(nc,alpha=al),
topo.colors(nc,alpha=al),
cm.colors(nc,alpha=al)))
head(col)
rf <- c("rainbow", "heat.colors", "terrain.colors", "topoo.colors", "cm.colors")
rf
paste(rf, "(", nc, ", alpha = ", al, ")")
paste(rf, "(", nc, ", alpha = ", al, ")", sep="")
paste(rf, "(", nc, ", alpha=", al, ")", sep="")
runApp()
runApp()
runApp()
rf <- c("rainbow", "heat.colors", "terrain.colors", "topoo.colors", "cm.colors")
rf=="rainbow"
ifelse(rf=="rainbow", paste(", s=","sa",", v=",va,sep=""),"")
ifelse(rf=="rainbow", paste(", s=",sa,", v=",va,sep=""),"")
rfunc <- paste(rf, "(", nc, ", alpha=", al, ifelse(rf=="rainbow", paste(", s=",sa,", v=",va,sep=""),""), ")", sep="")
rfunc
runApp()
runApp()
runApp()
paste(rf, "(", nc, ifelse(rf=="rainbow", paste(", s=",sa,", v=",va,sep=""),""), ")", ", alpha=", al, sep="")
paste(rf, "(", nc, ifelse(rf=="rainbow", paste(", s=",sa,", v=",va,sep=""),""), ", alpha=", al, ")", sep="")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(colorspace)
library("colorspace")
hcl_palettes(plot = TRUE)
hcl_palettes(n=10, plot = TRUE)
hcl_palettes(quantitative, n=10, plot = TRUE)
hcl_palettes("quantitative", n=10, plot = TRUE)
hcl_palettes("qualitative", n=10, plot = TRUE)
hcl_palettes("Sequential", n=10, plot = TRUE)
hcl_palettes("Diverging", n=10, plot = TRUE)
ggplotly(hcl_palettes("qualitative", plot=T))
hcl_palettes("qualitative", n=10, plot = TRUE, border="white")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colors(grey90,alpha=0.1)
runApp()
col2rgb("grey90",alpha=0.1)
col2hex("grey90",alpha=0.1)
adjustcolor( "grey90", alpha.f = 0.1)
runApp()
adjustcolor( "grey10", alpha.f = 0.1)
runApp()
hcl_palettes(plot = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
