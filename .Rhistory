p <- ggplot(col,aes(x=x,y=y), fill=color) + geom_tile(mapping=T)
p <- ggplot(col,aes(x=x,y=y), fill=color) + geom_tile(mapping=T) + theme(legend.position = "none")
p <- ggplot(col,aes(x=x,y=y), fill=color) + geom_tile() + theme(legend.position = "none")
p
p <- ggplot(col,aes(x=x,y=y, fill=color)) + geom_tile() + theme(legend.position = "none")+ scale_fill_manual(values = sort(col$color))
p
p <- ggplot(col,aes(x=x,y=y, fill=color)) + geom_tile() + theme(legend.position = "none")+ scale_fill_manual(values = sort(col$color))+scale_y_reverse(limits = c(37, 0))
ggplotly(p)
p <- ggplot(col,aes(x=x,y=y, fill=color)) + geom_tile() + theme(legend.position = "none")+ scale_fill_manual(values = sort(col$color))+scale_y_reverse(limits = c(37, 0))+scale_x_reverse(limits = c(15, 0))
ggplotly(p)
p <- ggplot(col,aes(x=y,y=x, fill=color)) + geom_tile() + theme(legend.position = "none")+ scale_fill_manual(values = sort(col$color))+scale_y_reverse(limits = c(15, 0))
ggplotly(p)
p <- ggplot(col,aes(x=y,y=x, fill=color)) + geom_tile() + theme(legend.position = "none")+ scale_fill_manual(values = sort(col$color))+scale_y_reverse(limits = c(15, 0))+theme_void()
ggplotly(p)
ggplot(col,aes(x=y,y=x, fill=color)) + geom_tile()+ scale_fill_manual(values = sort(col$color))+scale_y_reverse(limits = c(15, 0))+theme_void()+theme(legend.position = "none")
p <- ggplot(col,aes(x=y,y=x, fill=color)) + geom_tile()+ scale_fill_manual(values = sort(col$color))+scale_y_reverse(limits = c(15, 0))+theme_void()+theme(legend.position = "none")
ggplotly(p)
shiny::runApp('Documents/coloR/coloR')
ggplot(col,aes(x=y,y=x, fill=color)) +
geom_point()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme_void()+theme(legend.position = "none")
ggplot(xy) + geom_point(aes(x=y,y=x),col=col$color,size=5,shape=15) + theme(legend.position = "none")
ggplot(xy) + geom_point(aes(x=y,y=x),col=col$color,size=5,shape=15) +scale_y_reverse(limits = c(15, 0))+theme_void()+ theme(legend.position = "none")
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
p
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
ggplot(col,aes(x=y,y=x, fill=color)) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
axes = element_blank())
ggplot(col,aes(x=y,y=x, fill=color)) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
axis = element_blank())
ggplot(col,aes(x=y,y=x, fill=color)) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank())
ggplot(col,aes(x=y,y=x, fill=color)) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_blank())
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
head(col)
runApp('Documents/coloR/coloR')
xy <- expand.grid(x=1:15,y=1:37)[1:555,]
col <- data.frame(t(rgb2hsv(unlist(col2rgb(colors())))),
o=1:657,
color=colors())
col <- col %>%
#arrange(h,s,o) %>%
filter(str_detect(color, "^gray", negate=T)) %>%
separate(color, remove=F,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])", convert=T) %>%
replace_na(list(num= 0)) %>%
add_column(xy)
head(col)
ggp <- ggplotly(
ggplot(col,aes(x=y,y=x, fill=color)) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_blank()),
tooltip=c("color")) %>% layout(dragmode = "select")
d <- event_data("plotly_click")
output$click <- renderPrint({
d <- event_data("plotly_click")
req(d)
co <- col[d$key, 5]
print(c(co,col2hex(co)))
})
renderPrint({
d <- event_data("plotly_click")
req(d)
co <- col[d$key, 5]
print(c(co,col2hex(co)))
})
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
plotly_example("shiny", "event_data")
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
xy <- expand.grid(x=1:15,y=1:37)[1:555,]
coll <- data.frame(t(rgb2hsv(unlist(col2rgb(colors())))),
o=1:657,
color=colors())
col <- coll %>%
#arrange(h,s,o) %>%
filter(str_detect(color, "^gray", negate=T)) %>%
separate(color, remove=F,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])", convert=T) %>%
replace_na(list(num= 0)) %>%
add_column(xy) %>%
mutate(hex=col2hex(color))
#co <- col$color
ggp <- ggplotly(
ggplot(col,aes(x=y,y=x, fill=color)) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_blank()),
tooltip=c("color","hex"))
ggp
head(col)
ggp <- ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('Color: ', color,
'</br>Hex: ', hex))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_blank()))
ggp
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color<\b>: ', color,
'</br><b>Hex<\b>: ', hex))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_blank()),
tooltip="text")
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color<\b><br>: ', color,
'<b>Hex<\b>: ', hex))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_blank()),
tooltip="text")
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color</b><br>: ', color,
'<b>Hex</b>: ', hex))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_blank()),
tooltip="text")
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color</b>: ', color,
'<br><b>Hex</b>: ', hex))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
title = element_blank(),
panel.background = element_blank()),
tooltip="text")
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
colors()
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
sc
event_data("plotly_doubleclick")
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
col2rgb("red")
c(col2rgb("red"))
paste(c(col2rgb("red")))
c(col2rgb("red"),collapse="")
c(col2rgb("red"),collaps='')
paste(c(col2rgb("red")), collapse = '')
col2rgb(c("red","yellow"))
c(col2rgb(c("red","yellow")))
paste(col2rgb(c("red","yellow")))
apply(ol2rgb(c("red","yellow")), 2)
apply(ol2rgb(c("red","yellow")), 2, fun=paste)
apply(ol2rgb(c("red","yellow")), 2, FUN=paste)
apply(Col2rgb(c("red","yellow")), 2, FUN=paste)
apply(col2rgb(c("red","yellow")), 2, FUN=paste)
apply(col2rgb(c("red","yellow")), 2, FUN=unlist)
apply(col2rgb(c("red","yellow")), 2, FUN=paste,collapse='')
x <- col2rgb(c("red","yellow"))
paste(rownames(x))
paste(rownames(x),x)
paste(rownames(x),x,sep="=")
x <- col2rgb("red")
paste(rownames(x),x)
paste(rownames(x),x,sep="=")
paste(rownames(x),x,sep="=",collapse = '; ')
paste(rownames(x),x,sep="=",collapse = ', ')
paste(rownames(x),x,sep="=",collapse = ' ')
paste(rownames(x),x,sep=", ",collapse = '')
paste("(r,g,b) = (",paste(x,collapse=', '),")",sep="")
paste(x,collapse=', ')
rgb2hsv(col2rgb("red"))
library(jamba)
install.packages(jamba)
install.packages(jamba-colors)
col2hcl("Red")
col2hcl("red")
library(scales)
col2hcl(colors()[2])
col2hcl("red")
col2hcl(col2rgb("red"))
col2hcl(col2rgb("red"))
col2hcl(colors())
head(col)
d <- 500
cn <- col$color[d]
Hex <- col$hex[d]
Rgb <- paste(col2rgb(cn),collapse=', ')
Hsv <- paste(rgb2hsv(col2rgb(cn)), collapse=', ')
out <- cbind(c(cn,Rgb,Hsv))
rownames(out) <- c("Color","RGB","HSV")
out
cn <- col$color[d]
Hex <- col$hex[d]
Rgb <- paste(col2rgb(cn),collapse=', ')
Hsv <- paste(round(rgb2hsv(col2rgb(cn)),3), collapse=', ')
out <- cbind(c(cn,Rgb,Hsv))
rownames(out) <- c("Color","RGB","HSV")
out
cn <- col$color[d]
Hex <- col$hex[d]
Rgb <- paste(col2rgb(cn),collapse=', ')
Hsv <- paste(round(rgb2hsv(col2rgb(cn)),3), collapse=', ')
out <- cbind(as.character(c(cn,Rgb,Hsv)))
rownames(out) <- c("Color","RGB","HSV")
out
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
paste(col2rgb(colors()),collapse=', ')
col2rgb(colors())
apply(col2rgb(colors()),2,paste,collapse = ', ')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
round(rgb2hsv(col2rgb(colors())),3)
apply(round(rgb2hsv(col2rgb(colors())),3),
margin=2, FUN=paste, collapse = ', ')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
d
d
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
xy <- expand.grid(x=1:15,y=1:37)[1:555,]
coll <- data.frame(t(rgb2hsv(unlist(col2rgb(colors())))),
o=1:657,
color=colors())
col <- coll %>%
filter(str_detect(color, "^gray", negate=T)) %>%
separate(color, remove=F,
into = c("text", "num"),
sep = "(?<=[A-Za-z])(?=[0-9])", convert=T) %>%
replace_na(list(num= 0)) %>%
add_column(xy) %>%
mutate(HEX=col2hex(color),
RGB=apply(col2rgb(color),2,paste,collapse = ', ')) %>%
mutate(HSV=apply(round(rgb2hsv(col2rgb(color)),3),
MARGIN=2, FUN=paste, collapse = ', '))
ggp <- ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
#title = element_blank(),
panel.background = element_blank(),
plot.margin=unit(c(-10,0,0,0), "mm")),
tooltip="text")
ggp
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
#title = element_blank(),
panel.background = element_blank(),
plot.margin=unit(c(10,-10,0,0), "mm")),
tooltip="text")
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
#title = element_blank(),
panel.background = element_blank(),
plot.margin=unit(c(0,0,0,0), "mm")),
tooltip="text")
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
#title = element_blank(),
panel.background = element_blank(),
tooltip="text")
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
#title = element_blank(),
panel.background = element_blank()),
tooltip="text")
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
#title = element_blank(),
panel.background = element_blank(),
plot.margin=unit(c(5,0,0,0), "mm")),
tooltip="text")
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
#title = element_blank(),
panel.background = element_blank(),
plot.margin=unit(c(-5,0,0,0), "mm")),
tooltip="text")
ggplotly(
ggplot(col,aes(x=y,y=x, fill=color,
text=paste('<b>Color</b>: ', color,
'<br><b>HEX</b>: ', HEX,
'<br><b>RGB</b>: ', RGB,
'<br><b>HSV</b>: ', HSV))) +
geom_tile()+
scale_fill_manual(values = sort(col$color))+
scale_y_reverse(limits = c(15, 0))+
theme(legend.position = "none",
line = element_blank(),
text = element_blank(),
#title = element_blank(),
panel.background = element_blank(),
plot.margin=unit(c(5,0,0,0), "mm")),
tooltip="text")
runApp()
runApp()
