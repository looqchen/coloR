ggplot(ggr1980df, aes(x=x,y=y))+
geom_tile(aes(fill=Color),height=0.8)+
scale_fill_identity()+
geom_text(data=r1980df,label=r1980df$Palette,hjust=1, nudge_x=0.3,size=6)+
xlim(-4,13)+
theme(legend.position = "none",
line = element_blank(),
axis.text = element_blank(),
title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm"))
ggplot(ggr1980df, aes(x=x,y=y))+
geom_tile(aes(fill=Color),height=0.8)+
scale_fill_identity()+
geom_text(data=r1980df,label=r1980df$Palette,hjust=1, nudge_x=0.3,size=6)+
xlim(-4,12)+
theme(legend.position = "none",
line = element_blank(),
axis.text = element_blank(),
title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm"))
runApp('Documents/coloR/coloR')
show_col(brewer_pal()(10))
names(brewer_pal())
args(brewer.pal())
args(brewer.pal
)
args(brewer.pal)$n
as.list(args(brewer.pal))
runApp('Documents/coloR/coloR')
runApp()
runApp('Documents/coloR/coloR')
colfunc <- sapply(ggsci_func_names <- ls("package:ggsci")[1:18], FUN=get)
as.list(args(get(colfunc[1])))$palette
colfunc
as.list(args(get(colfunc[[1]])))$palette
colfunc[[1]]
as.list(args(colfunc[[1]]))$palette
as.list(args(colfunc[[1]]))
runApp('Documents/coloR/coloR')
palettelist <- list(baser=c("rainbow", "heat.colors", "terrain.colors", "topo.colors", "cm.colors"),
canva=unique(c("Shades of citrus",sort(names(canva_palettes)))),
colorspace=rownames(data.frame(hcl_palettes())),
ggsci=toupper(matrix(unlist(strsplit(ls("package:ggsci")[1:18],split="_")),ncol=2,byrow=T)[,2]),
ghibli=names(ghibli_palettes),
r1980=ls("package:NineteenEightyR"),
nord=names(nord_palettes),
rcolorbrewer=rownames(brewer.pal.info))
ggsci_func_names <- ls("package:ggsci")[1:18]
fx <- function(x) as.character(as.list(args(get(x)))$palette)[-1]
opt.list <- sapply(ggsci_func_names, FUN=fx)
optlist4 <- opt.list[paste0("pal_",moreopt <- c("d3","igv","material","uchicago"))]
maxnumlist <- list(
baser=NA,
canva=4,
colorspace=NA,
ggsci=list(10,list(category10=10,category20=20,
category20b=20,category20c=20),
12,12,list(default=51,alternating=2),
7,10,9,7,10,8,10,12,16,7,7,9,26),
r1980=r1980nx,
nord=NA,
rcolorbrewer=c(rep(11,9),8,8,12,9,8,9,8,12,rep(9,18))
)
names(maxnumlist$ggsci) <- ggsci_func_names
names(maxnumlist$rcolorbrewer) <- rownames(brewer.pal.info)
r1980_func <- sapply(r1980_func_names <- ls("package:NineteenEightyR"), FUN=get)
ny <- length(r1980_func)
r1980nx <- nx <- sapply(r1980_func, FUN=function(x) as.list(args(x))$n)
palettelist <- list(baser=c("rainbow", "heat.colors", "terrain.colors", "topo.colors", "cm.colors"),
canva=unique(c("Shades of citrus",sort(names(canva_palettes)))),
colorspace=rownames(data.frame(hcl_palettes())),
ggsci=toupper(matrix(unlist(strsplit(ls("package:ggsci")[1:18],split="_")),ncol=2,byrow=T)[,2]),
ghibli=names(ghibli_palettes),
r1980=ls("package:NineteenEightyR"),
nord=names(nord_palettes),
rcolorbrewer=rownames(brewer.pal.info))
ggsci_func_names <- ls("package:ggsci")[1:18]
fx <- function(x) as.character(as.list(args(get(x)))$palette)[-1]
opt.list <- sapply(ggsci_func_names, FUN=fx)
optlist4 <- opt.list[paste0("pal_",moreopt <- c("d3","igv","material","uchicago"))]
maxnumlist <- list(
baser=NA,
canva=4,
colorspace=NA,
ggsci=list(10,list(category10=10,category20=20,
category20b=20,category20c=20),
12,12,list(default=51,alternating=2),
7,10,9,7,10,8,10,12,16,7,7,9,26),
r1980=r1980nx,
nord=NA,
rcolorbrewer=c(rep(11,9),8,8,12,9,8,9,8,12,rep(9,18))
)
names(maxnumlist$ggsci) <- ggsci_func_names
names(maxnumlist$rcolorbrewer) <- rownames(brewer.pal.info)
maxnumlist
maxnumcol <- maxnumlist$r1980["cobra"]
maxnumcol
maxnumcol <- maxnumlist$ggsci["igv"]["default"]
maxnumcol
maxnumcol <- maxnumlist$ggsci["pal_igv"]["default"]
maxnumcol
maxnumlist$ggsci["pal_igv"]
maxnumlist$ggsci["pal_igv"]$default
maxnumlist$ggsci["pal_igv"]["alternating"]
maxnumlist$ggsci["pal_igv"][[1]]
maxnumlist$ggsci["pal_igv"][[1]]["default"]
runApp('Documents/coloR/coloR')
runApp()
runApp('Documents/coloR/coloR')
shiny::runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp()
runApp('Documents/coloR/coloR')
runApp()
runApp('Documents/coloR/coloR')
view(diamonds)
summary(diamonds)
runApp('Documents/coloR/coloR')
summary(diamonds)
shiny::runApp('Documents/coloR/coloR')
summary(diamonds)
runApp('Documents/coloR/coloR')
ggplot(diamonds, aes(price, colour = cut)) +
geom_freqpoly(binwidth = 500)
ggplot(diamonds, aes(price, colour = color)) +
geom_freqpoly(binwidth = 500)
ggplot(diamonds, aes(price, colour = color)) +
geom_density()
library(help = "datasets")
view(women)
view(BJsales)
view(BOD)
view(ChickWeight)
view(ChickWeight)
view(EuStockMarkets)
view(Formaldehyde)
view(Indometh)
view(JohnsonJohnson)
view(LifeCycleSavings)
view(Titanic)
view(Titanic)
view(faithful)
view(chickwts)
runApp('Documents/coloR/coloR')
max(diamonds$carat)
min(diamonds$carat)
diamonds %>% add_column(Carat=cut(diamonds$carat, breaks=c(-Inf, 0.4, 0.7, 1, Inf), labels=c(expression(""<= "0.4"),"(0.4, 0.7]","(0.7, 1.0]", "> 1.0")))
summary(diamonds)
diamonds <- diamonds %>% add_column(Carat=cut(diamonds$carat, breaks=c(-Inf, 0.4, 0.7, 1, Inf), labels=c(expression(""<= "0.4"),"(0.4, 0.7]","(0.7, 1.0]", "> 1.0")))
summary(diamonds)
diamonds <- diamonds %>% add_column(Carat=cut(diamonds$carat, breaks=c(-Inf, 0.4, 0.7, 1, Inf), labels=c(expression(<= 0.4),"(0.4, 0.7]","(0.7, 1.0]", "> 1.0")))
diamonds <- diamonds %>% add_column(Carat=cut(diamonds$carat, breaks=c(-Inf, 0.4, 0.7, 1, Inf), labels=c(expression(""<= 0.4),"(0.4, 0.7]","(0.7, 1.0]", "> 1.0")))
shiny::runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
tags$head(
tags$style({HTML("
@import url('https://fonts.googleapis.com/css2?family=Carter+One&display=swap');
body {
background-color: white;
color: black;
}
h2 {
font-family: 'Carter One';
font-size: 60px;
background: -webkit-linear-gradient(left, #FFAEB9, #EEEE00 5%, #53868B 10%, #FFAEB9);
-webkit-background-clip: text;
-webkit-text-fill-color: transparent;
}
.shiny-input-container {
color: #474747;
}")})
shiny::runApp('Documents/coloR/coloR')
col <- canva_pal(palette = "Shades of citrus")(4)
col
col <- canva_pal(palette = "Shades of citrus")(5)
col
runApp('Documents/coloR/coloR')
length(!is.na(col))
col
!is.na(col)
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
shiny::runApp('Documents/coloR/coloR')
colors()
charmatch("m",   c("mean", "median", "mode")) # returns 0
charmatch("med", c("mean", "median", "mode")) # returns 2
pmatch("m",   c("mean", "median", "mode")) # returns NA
pmatch("med", c("mean", "median", "mode")) # returns 2
filter(str_detect(colors(), "^gray", negate=T))
starts_with(colors(),"gray")
starts_with("gray",colors())
str_starts(colors(),"gray")
sum(str_starts(colors(),"gray"))
colors()
colors()[-str_starts(colors(),"gray")]
length(colors()[-str_starts(colors(),"gray")])
length(colors()[str_starts(colors(),"gray",negate=T)])
runApp('Documents/coloR/coloR')
colors()[str_starts(colors(),"gray",negate=T)]
runApp('Documents/coloR/coloR')
xx <- colors()[1:4]
dichromat(xx)
xx
desaturate(xx)
runApp('Documents/coloR/coloR')
runApp()
runApp('Documents/coloR/coloR')
runApp()
runApp('Documents/coloR/coloR')
devtools::install_github("EmilHvitfeldt/quickpalette")
library(quickpalette)
force(`%>%`)
force(regex_palette)
text1 <- "3b59988b9dc3dfe3eef7f7f7ffffff"
text2 <- "the palatte is #3472bc, #345682 then #112233 and finally #cbac43"
# Returns vector when input is of length 1
regex_palette(text1)
regex_palette(text2)
text3 <- c("3b59988b9dc3dfe3eef7f7f7ffffff", "3b59988b9dc3dfe3eef7f7f7ffffff")
regex_palette(text3)
regex_palette("dreaming")
regex_palette("greenblue")
install.packages("rcartocolor")
library(rcartocolor)
cartocolors
names(cartocolors)
head(cartocolors)
cartocolors$n2[1]
cartocolors$n2[2]
cartocolors$n3[1]
cartocolors$n4[1]
cartocolors$n5[1]
cartocolors$n6[1]
cartocolors$n7[1]
cartocolors$n8[1]
cartocolors$n9[1]
cartocolors$n12[1]
cartocolors[11:20]
cartocolors[11:20,]
cartocolors$n7[11]
cartocolors$n8[11]
cartocolors$n9[11]
cartocolors$n10[11]
cartocolors$n11[11]
cartocolors$n12[11]
cartocolors[,1]
carto_pal(n=7,name="safe")
carto_pal(n=7,name="Safe")
carto_pal(n=12,name="Safe")
carto_pal(n=13,name="Safe")
carto_pal(n=2,name="Safe")
carto_pal(n=2,name="Earth")
View(display_carto_all)
display_carto_all()
View(metacartocolors)
shiny::runApp('Documents/coloR/coloR')
length(cartocolors)
nrow(cartocolors)
View(cartocolors)
apply(cartocolors,1,FUN=function(x) x[nx])
nx <- metacartocolors$Max_n
apply(cartocolors,1,FUN=function(x) x[nx])
apply(cartocolors,1,FUN=function(x) x[nx+1])
apply(cartocolors,1,FUN=function(x) if(x[13]==NULL){return(x[8])}else{return(x[13])})
xfun <- function(x) if(x[13]==NULL){return(x[8])}else{return(x[13])}
apply(cartocolors,1,FUN=xfun)
cartocolors[1,][13]
xfun <- function(x) out <- NULL;if(x[13]==NULL){out<-x[8]}else{out<-x[13]}
xfun <- function(x) {out <- NULL;if(x[13]==NULL){out<-x[8]}else{out<-x[13]}}
apply(cartocolors,1,FUN=xfun)
nx
cartocolors[nx+1]
cartocolors2 <- data.frame(cartocolors,nx)
apply(cartocolors,1,FUN=function(x) x[x$nx+1])
apply(cartocolors2,1,FUN=function(x) x[x$nx+1])
unlist(apply(cartocolors2,1,FUN=function(x) x[x$nx+1]))
as.character(unlist(apply(cartocolors2,1,FUN=function(x) x[x$nx+1])))
ny <- nrow(cartocolors)
nx <- metacartocolors$Max_n
cartodf <- data.frame(y=c((ny/2):1,(ny/2):1),
x=0.5,
Palette=cartocolors$Name,
wrap=rep(1:2,each=ny/2))
yy <- unlist(apply(data.frame(cartodf$y,nx),1,FUN=function(x) rep(x[1],x[2])))
ww <- unlist(apply(data.frame(cartodf$wrap,nx),1,FUN=function(x) rep(x[1],x[2])))
nxfun <- function(x){
if(x >= 10){
out <- (1:x)/2+0.25
}else{
out <- 1:x
}
out
}
wid <- unlist(sapply(nx, FUN=function(x) (x<10)/2+0.5))
ggcartodf <- data.frame(y=yy,
x=unlist(sapply(nx, FUN=nxfun)),
Width=unlist(apply(data.frame(wid,nx),1,FUN=function(x) rep(x[1],x[2]))),
Color=as.character(unlist(apply(data.frame(cartocolors,nx),1,FUN=function(x) x[x$nx+1]))),
wrap=ww)
ggplot(ggcartodf, aes(x=x,y=y))+
geom_tile(aes(width=Width,fill=Color),height=0.6)+
scale_fill_identity()+
facet_wrap(~wrap)+
geom_text(data=cartodf,label=cartodf$Palette,hjust=0, nudge_y=0.5, size=5)+
theme(legend.position = "none",
line = element_blank(),
axis.text = element_blank(),
title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm"))
ny <- nrow(cartocolors)
nx <- metacartocolors$Max_n
cartodf <- data.frame(y=c((ny/2):1,(ny/2):1),
x=0.5,
Palette=cartocolors$Name,
wrap=rep(1:2,each=ny/2))
yy <- unlist(apply(data.frame(cartodf$y,nx),1,FUN=function(x) rep(x[1],x[2])))
ww <- unlist(apply(data.frame(cartodf$wrap,nx),1,FUN=function(x) rep(x[1],x[2])))
nxfun <- function(x){
if(x >= 10){
out <- (1:x)*7/12-7/12+0.5
}else{
out <- 1:x
}
out
}
wid <- unlist(sapply(nx, FUN=function(x) (x<10)*7/12+0.5))
ggcartodf <- data.frame(y=yy,
x=unlist(sapply(nx, FUN=nxfun)),
Width=unlist(apply(data.frame(wid,nx),1,FUN=function(x) rep(x[1],x[2]))),
Color=as.character(unlist(apply(data.frame(cartocolors,nx),1,FUN=function(x) x[x$nx+1]))),
wrap=ww)
ggplot(ggcartodf, aes(x=x,y=y))+
geom_tile(aes(width=Width,fill=Color),height=0.6)+
scale_fill_identity()+
facet_wrap(~wrap)+
geom_text(data=cartodf,label=cartodf$Palette,hjust=0, nudge_y=0.5, size=5)+
theme(legend.position = "none",
line = element_blank(),
axis.text = element_blank(),
title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm"))
ny <- nrow(cartocolors)
nx <- metacartocolors$Max_n
cartodf <- data.frame(y=c((ny/2):1,(ny/2):1),
x=0.5,
Palette=cartocolors$Name,
wrap=rep(1:2,each=ny/2))
yy <- unlist(apply(data.frame(cartodf$y,nx),1,FUN=function(x) rep(x[1],x[2])))
ww <- unlist(apply(data.frame(cartodf$wrap,nx),1,FUN=function(x) rep(x[1],x[2])))
nxfun <- function(x){
if(x >= 10){
out <- (1:x)*7/12-7/12+0.5
}else{
out <- 1:x
}
out
}
wid <- unlist(sapply(nx, FUN=function(x) -(x>10)*5/12+1))
ggcartodf <- data.frame(y=yy,
x=unlist(sapply(nx, FUN=nxfun)),
Width=unlist(apply(data.frame(wid,nx),1,FUN=function(x) rep(x[1],x[2]))),
Color=as.character(unlist(apply(data.frame(cartocolors,nx),1,FUN=function(x) x[x$nx+1]))),
wrap=ww)
ggplot(ggcartodf, aes(x=x,y=y))+
geom_tile(aes(width=Width,fill=Color),height=0.6)+
scale_fill_identity()+
facet_wrap(~wrap)+
geom_text(data=cartodf,label=cartodf$Palette,hjust=0, nudge_y=0.5, size=5)+
theme(legend.position = "none",
line = element_blank(),
axis.text = element_blank(),
title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm"))
ny <- nrow(cartocolors)
nx <- metacartocolors$Max_n
cartodf <- data.frame(y=c((ny/2):1,(ny/2):1),
x=0.5,
Palette=cartocolors$Name,
wrap=rep(1:2,each=ny/2))
yy <- unlist(apply(data.frame(cartodf$y,nx),1,FUN=function(x) rep(x[1],x[2])))
ww <- unlist(apply(data.frame(cartodf$wrap,nx),1,FUN=function(x) rep(x[1],x[2])))
nxfun <- function(x){
if(x >= 10){
out <- (1:x)*7/12-7/12+1
}else{
out <- 1:x
}
out
}
wid <- unlist(sapply(nx, FUN=function(x) -(x>10)*5/12+1))
ggcartodf <- data.frame(y=yy,
x=unlist(sapply(nx, FUN=nxfun)),
Width=unlist(apply(data.frame(wid,nx),1,FUN=function(x) rep(x[1],x[2]))),
Color=as.character(unlist(apply(data.frame(cartocolors,nx),1,FUN=function(x) x[x$nx+1]))),
wrap=ww)
ggplot(ggcartodf, aes(x=x,y=y))+
geom_tile(aes(width=Width,fill=Color),height=0.6)+
scale_fill_identity()+
facet_wrap(~wrap)+
geom_text(data=cartodf,label=cartodf$Palette,hjust=0, nudge_y=0.5, size=5)+
theme(legend.position = "none",
line = element_blank(),
axis.text = element_blank(),
title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm"))
ny <- nrow(cartocolors)
nx <- metacartocolors$Max_n
cartodf <- data.frame(y=c((ny/2):1,(ny/2):1),
x=0.5,
Palette=cartocolors$Name,
wrap=rep(1:2,each=ny/2))
yy <- unlist(apply(data.frame(cartodf$y,nx),1,FUN=function(x) rep(x[1],x[2])))
ww <- unlist(apply(data.frame(cartodf$wrap,nx),1,FUN=function(x) rep(x[1],x[2])))
nxfun <- function(x){
if(x >= 10){
out <- (1:x)*7/12+0.5
}else{
out <- 1:x
}
out
}
wid <- unlist(sapply(nx, FUN=function(x) -(x>10)*5/12+1))
ggcartodf <- data.frame(y=yy,
x=unlist(sapply(nx, FUN=nxfun)),
Width=unlist(apply(data.frame(wid,nx),1,FUN=function(x) rep(x[1],x[2]))),
Color=as.character(unlist(apply(data.frame(cartocolors,nx),1,FUN=function(x) x[x$nx+1]))),
wrap=ww)
ggplot(ggcartodf, aes(x=x,y=y))+
geom_tile(aes(width=Width,fill=Color),height=0.6)+
scale_fill_identity()+
facet_wrap(~wrap)+
geom_text(data=cartodf,label=cartodf$Palette,hjust=0, nudge_y=0.5, size=5)+
theme(legend.position = "none",
line = element_blank(),
axis.text = element_blank(),
title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm"))
ny <- nrow(cartocolors)
nx <- metacartocolors$Max_n
cartodf <- data.frame(y=c((ny/2):1,(ny/2):1),
x=0.5,
Palette=cartocolors$Name,
wrap=rep(1:2,each=ny/2))
yy <- unlist(apply(data.frame(cartodf$y,nx),1,FUN=function(x) rep(x[1],x[2])))
ww <- unlist(apply(data.frame(cartodf$wrap,nx),1,FUN=function(x) rep(x[1],x[2])))
nxfun <- function(x){
if(x >= 10){
out <- (1:x)*7/12+0.5-7/24
}else{
out <- 1:x
}
out
}
wid <- unlist(sapply(nx, FUN=function(x) -(x>10)*5/12+1))
ggcartodf <- data.frame(y=yy,
x=unlist(sapply(nx, FUN=nxfun)),
Width=unlist(apply(data.frame(wid,nx),1,FUN=function(x) rep(x[1],x[2]))),
Color=as.character(unlist(apply(data.frame(cartocolors,nx),1,FUN=function(x) x[x$nx+1]))),
wrap=ww)
ggplot(ggcartodf, aes(x=x,y=y))+
geom_tile(aes(width=Width,fill=Color),height=0.6)+
scale_fill_identity()+
facet_wrap(~wrap)+
geom_text(data=cartodf,label=cartodf$Palette,hjust=0, nudge_y=0.5, size=5)+
theme(legend.position = "none",
line = element_blank(),
axis.text = element_blank(),
title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank(),
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent"),
plot.margin=unit(c(0,0,0,0), "mm"))
metacartocolors$Max_n
x <- metacartocolors$Max_n
names(x) <- metacartocolors$Name
x
runApp('Documents/coloR/coloR')
install.packages("Redmonder")
library(Redmonder)
runApp('Documents/coloR/coloR')
runApp('Documents/coloR/coloR')
shiny::runApp('Documents/coloR/coloR')
